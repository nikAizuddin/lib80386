         1         2         3         4         5         6         7
1234567890123456789012345678901234567890123456789012345678901234567890
======================================================================

FUNCTION: pow_double

DESCRIPTION: Calculate floating-point power operation, such as
             2.15^3.18

REQUIRES: ---

BUGS: ---

FUTURE IMPROVEMENTS: ---

----------------------------------------------------------------------

PROCESS DESCRIPTION:

  pow_double( x:64bit, y:64bit ) : 64bit

  Input parameters
      1) x = base value
      2) y = power value

  Output parameters
      ---

  Returns
      result (ST0)

  +-------------------------------------------------------------+
  |                     STACK STRUCTURE                         |
  +--------+-------------+--------------------------------------+
  | Offset |    Data     |             Description              |
  +--------+-------------+--------------------------------------+
  | +    0 | x[0]        | ---                                  |
  | +    4 | x[1]        |                                      |
  |        |             |                                      |
  +--------+-------------+--------------------------------------+
  | +    8 | y[0]        | ---                                  |
  | +   12 | y[1]        |                                      |
  |        |             |                                      |
  +--------+-------------+--------------------------------------+
  | +   16 | constant[0] | Stores constant value of 1.0         |
  | +   20 | constant[1] | (0x3ff0000000000000)                 |
  |        |             |                                      |
  +--------+-------------+--------------------------------------+
  | Total stack used for local variables = 24 bytes             |
  +-------------------------------------------------------------+

       begin

  001:     Initialize FPU stack.
  002:     st0 = log2(x) * y;
  003:     st1 = st0;
  004:     Round st0 to the nearest;
  005:     st1 = st1 - st0;
  006:     st0 = st1, st1 = st0;
  007:     st0 = (2^st0) - 1.0;
  008:     st0 += 1.0;
  009:     st0 = st0 * ( 2 ^ round_to_nearest(st1) );
  010:     Return st0;

       end.

======================================================================
