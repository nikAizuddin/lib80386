         1         2         3         4         5         6         7
1234567890123456789012345678901234567890123456789012345678901234567890
======================================================================

FUNCTION: cvt_string2double

DESCRIPTION: Convert ASCII string to double precision.

REQUIRES: pow_int.asm,
          find_int_digits.asm,
          cvt_string2int.asm,
          cvt_string2dec.asm,
          cvt_dec2hex.asm

BUGS: ---

FUTURE IMPROVEMENTS: ---

----------------------------------------------------------------------

PROCESS DESCRIPTION:

  cvt_string2double( addr_instring:32bit,
                     instrlen:32bit ) : 64bit (ST0)

  Input parameters
      1) addr_instring = address to the input string
      2) instrlen      = input strlen

  Output parameters

  Returns
      double precision value (ST0)

  +----------------------------------------------------------------+
  |                       STACK STRUCTURE                          |
  +--------+---------------------+---------------------------------+
  | Offset |      Data           |           Description           |
  +--------+---------------------+---------------------------------+
  | +    0 | addr_instring       | ---                             |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +    4 | instrlen            | ---                             |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +    8 | intpt_str[0]        | ASCII integer part              |
  | +   12 | intpt_str[1]        |                                 |
  | +   16 | intpt_str[2]        |                                 |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   20 | intpt_strlen        | String length for the ASCII     |
  |        |                     | integer part.                   |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   24 | intpt_int           | Integer value for ASCII integer |
  |        |                     | part.                           |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   28 | decpt_str[0]        | ASCII decimal part              |
  | +   32 | decpt_str[1]        |                                 |
  | +   36 | decpt_str[2]        |                                 |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   40 | decpt_strlen        | String length for the ASCII     |
  |        |                     | integer part.                   |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   44 | decpt_int           | Integer value for ASCII decimal |
  |        |                     | part.                           |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   48 | decs                | Decimal places.                 |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   52 | heading_zeroes      | The heading zeroes of the       |
  |        |                     | decimal part.                   |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | +   56 | is_negative         | Is the value negative..?        |
  |        |                     |                                 |
  +--------+---------------------+---------------------------------+
  | Total stack used for local variables = 56 bytes                |
  +----------------------------------------------------------------+

       begin

           ##
           ## Separate string into ASCII integer part and
           ## ASCII decimal part.
           ##

  001:     ESI = addr_string;

  002:     AL = ESI;
  003:     if AL != 0x2d, goto .positive;
           .negative:
  004:         is_negative = 1;
  005:         ++ ESI;
           .positive:

  006:     EDI = @intpt_str;
           .loop_get_intpt:
  007:         LODSB;
  008:         if AL == 0x2e, goto .endloop_get_intpt;
  009:         EDI^ = AL;
  010:         ++ EDI;
  011:         ++ intpt_strlen;
  012:         goto .loop_get_intpt;
           .endloop_get_intpt:

  013:     EDI = @decpt_str;
           .loop_get_decpt:
  014:         LODSB;
  015:         if AL == 0x00, goto .endloop_get_decpt;
  016:         if AL != 0x30, goto .AL_not_zero;
               .AL_is_zero:
  017:             ++ heading_zeroes;
               .AL_not_zero:
  018:         EDI^ = AL;
  019:         ++ EDI;
  020:         ++ decpt_strlen;
  021:         goto .loop_get_decpt;
           .endloop_get_decpt:

           ##
           ## Convert intpt_str into intpt_int, and
           ## decpt_str into decpt_int.
           ##

  022:     intpt_int = cvt_string2int( @intpt_str, intpt_strlen );
  023:     decpt_int = cvt_string2int( @decpt_str, decpt_strlen );

  024:     decs = pow_int( 10,
                  heading_zeroes + find_int_digits(decpt_int,0) );
  025:     push decs to FPU;
  026:     push decpt_int to FPU;
  027:     FDIV ST1;

           ##
           ## Merge intpt_int and decpt_int into
           ## IEEE double precision format.
           ##

  028:     push intpt_int;
  029:     FADD ST1;
  030:     if is_negative == 0, goto .is_positive;
           .is_negative:
  031:         FCHS
           .is_positive:

       end.

======================================================================
