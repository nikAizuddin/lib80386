;         1         2         3         4         5         6         7
;1234567890123456789012345678901234567890123456789012345678901234567890
;+--------------------------------------------------------------------+
;|      FILENAME: prc212.asm                                          |
;|   DESCRIPTION: Source file for module prc212                       |
;+--------------------------------------------------------------------+
;|        AUTHOR: Nik Mohamad Aizuddin bin Nik Azmi                   |
;|         EMAIL: nickaizuddin93@gmail.com                            |
;|  DATE CREATED: 21/SEP/2014                                         |
;+--------------------------------------------------------------------+
;| NOTES: This source file is completely implemented.                 |
;|                                                                    |
;|                                                                    |
;|                                                                    |
;+--------------------------------------------------------------------+

;---- section instruction code ----------------------------------------
section .text

global prc212
;         1         2         3         4         5         6         7
;1234567890123456789012345678901234567890123456789012345678901234567890
;+--------------------------------------------------------------------+
;| Module prc212                                                      |
;+--------------------------------------------------------------------+
;| Name: Is test case divisible by k value                            |
;+--------------------------------------------------------------------+
;| Argument in                                                        |
;|   stack +  0 : decimal test case block 0                           |
;|   stack +  4 : decimal test case block 1                           |
;|   stack +  8 : length of decimal test case                         |
;|   stack + 12 : k value                                             |
;|   stack + 16 : address x value                                     |
;+--------------------------------------------------------------------+
;| Argument out                                                       |
;|   stack + 0 : x value                                              |
;+--------------------------------------------------------------------+
;| Return: None                                                       |
;+--------------------------------------------------------------------+
;| Module status: Alpha                                               |
;|          Bugs: None                                                |
;+--------------------------------------------------------------------+
;| Notes: This module is completely implemented.                      |
;|                                                                    |
;|                                                                    |
;|                                                                    |
;+--------------------------------------------------------------------+
prc212:

; setup stack frame
    sub    esp, 4     ; reserve 4 bytes for saving ebp
    mov    [esp], ebp ; save ebp to stack
    mov    ebp, esp   ; copy esp to ebp

; get arguments & set local variables
    add    ebp, 8              ; offset to get arguments 
    sub    esp, 64             ; reserve 64 bytes for local variables
    mov    eax, [ebp     ]     ; get decimal test case block 0
    mov    ebx, [ebp +  4]     ; get decimal test case block 1
    mov    ecx, [ebp +  8]     ; get length of decimal test case
    mov    edx, [ebp + 12]     ; get k value
    mov    [esp     ], eax     ; decimal test case block 0
    mov    [esp +  4], ebx     ; decimal test case block 1
    mov    [esp +  8], ecx     ; length of decimal test case
    mov    [esp + 12], edx     ; k value
    mov    eax, [ebp + 16]     ; get address x value
    mov    [esp + 16], eax     ; address x value
    mov    dword [esp + 20], 0 ; hexadecimal test case block 0
    mov    dword [esp + 24], 0 ; hexadecimal test case block 1
    mov    dword [esp + 28], 0 ; A
    mov    dword [esp + 32], 0 ; B
    mov    dword [esp + 36], 0 ; C
    mov    dword [esp + 40], 0 ; D
    mov    dword [esp + 44], 0 ; E
    mov    dword [esp + 48], 0 ; F
    mov    dword [esp + 52], 0 ; G
    mov    dword [esp + 56], 0 ; H
    mov    dword [esp + 60], 0 ; test case value

; A = decimal test case block 0 >> 4
    mov    eax, [esp     ] ; eax = decimal test case block 0
    shr    eax, 4          ; eax >>= 4
    mov    [esp + 28], eax ; A = eax

; B = ( decimal test case block 0 >> 8 ) * 0xa
    mov    eax, [esp     ] ; eax = decimal test case block 0
    shr    eax, 8          ; eax >>= 8
    mov    ebx, 0xa        ; ebx = 0xa
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 32], eax ; B = eax

; C = ( decimal test case block 0 >> 12 ) * 0x64
    mov    eax, [esp     ] ; eax = decimal test case block 0
    shr    eax, 12         ; eax >>= 12
    mov    ebx, 0x64       ; ebx = 0x64
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 36], eax ; C = eax

; D = ( decimal test case block 0 >> 16 ) * 0x3e8
    mov    eax, [esp     ] ; eax = decimal test case block 0
    shr    eax, 16         ; eax >>= 16
    mov    ebx, 0x3e8      ; ebx = 0x3e8
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 40], eax ; D = eax

; E = ( decimal test case block 0 >> 20 ) * 0x2710
    mov    eax, [esp     ] ; eax = decimal test case block 0
    shr    eax, 20         ; eax >>= 20
    mov    ebx, 0x2710     ; ebx = 0x2710
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 44], eax ; E = eax

; F = ( decimal test case block 0 >> 24 ) * 0x186a0
    mov    eax, [esp     ] ; eax = decimal test case block 0
    shr    eax, 24         ; eax >>= 24
    mov    ebx, 0x186a0    ; ebx = 0x186a0
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 48], eax ; F = eax

; G = ( decimal test case block 0 >> 28 ) * 0xf4240
    mov    eax, [esp     ] ; eax = decimal test case block 0
    shr    eax, 28         ; eax >>= 28
    mov    ebx, 0xf4240    ; ebx = 0xf4240
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 52], eax ; G = eax

; H = 0x6 * ( A + B + C + D + E + F + G )
    mov    eax, [esp + 28] ; eax = A
    mov    ebx, [esp + 32] ; ebx = B
    mov    ecx, [esp + 36] ; ecx = C
    mov    edx, [esp + 40] ; edx = D
    add    eax, ebx        ; eax += ebx
    add    eax, ecx        ; eax += ecx
    add    eax, edx        ; eax += edx
    mov    ebx, [esp + 44] ; ebx = E
    mov    ecx, [esp + 48] ; ecx = F
    mov    edx, [esp + 52] ; edx = G
    add    eax, ebx        ; eax += ebx
    add    eax, ecx        ; eax += ecx
    add    eax, edx        ; eax += edx
    mov    ebx, 0x6        ; ebx = 0x6
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 56], eax ; H = eax

; hexadecimal test case block 0 = decimal test case block 0 - H
    mov    eax, [esp     ] ; eax = decimal test case block 0
    mov    ebx, [esp + 56] ; ebx = H
    sub    eax, ebx        ; eax -= ebx
    mov    [esp + 20], eax ; hexadecimal test case block 0 = eax

; if length of decimal test case <= 8
    mov    eax, [esp +  8] ; eax = length of decimal test case
    cmp    eax, 8          ; compare eax with 8
    jg     .condition_10b  ; if > 8, goto .condition_10b
                           ; else, continue to .condition_10a

.condition_10a:

; test case value = hexadecimal test case block 0
    mov    eax, [esp + 20] ; eax = hexadecimal test case block 0
    mov    [esp + 60], eax ; test case value = eax

; since we are condition_10a, skip condition_10b
    jmp    .endcondition_10 ; goto endcondition_10

.condition_10b:

; A = decimal test case block 1 >> 4
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    shr    eax, 4          ; eax >>= 4
    mov    [esp + 28], eax ; A = eax

; B = ( decimal test case block 1 >> 8 ) * 0xa
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    shr    eax, 8          ; eax >>= 8
    mov    ebx, 0xa        ; ebx = 0xa
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 32], eax ; B = eax

; C = ( decimal test case block 1 >> 12 ) * 0x64
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    shr    eax, 12         ; eax >>= 12
    mov    ebx, 0x64       ; ebx = 0x64
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 36], eax ; C = eax

; D = ( decimal test case block 1 >> 16 ) * 0x3e8
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    shr    eax, 16         ; eax >>= 16
    mov    ebx, 0x3e8      ; ebx = 0x3e8
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 40], eax ; D = eax

; E = ( decimal test case block 1 >> 20 ) * 0x2710
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    shr    eax, 20         ; eax >>= 20
    mov    ebx, 0x2710     ; ebx = 0x2710
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 44], eax ; E = eax

; F = ( decimal test case block 1 >> 24 ) * 0x186a0
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    shr    eax, 24         ; eax >>= 24
    mov    ebx, 0x186a0    ; ebx = 0x186a0
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 48], eax ; F = eax

; G = ( decimal test case block 1 >> 28 ) * 0xf4240
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    shr    eax, 28         ; eax >>= 28
    mov    ebx, 0xf4240    ; ebx = 0xf4240
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 52], eax ; G = eax

; H = 0x6 * ( A + B + C + D + E + F + G )
    mov    eax, [esp + 28] ; eax = A
    mov    ebx, [esp + 32] ; ebx = B
    mov    ecx, [esp + 36] ; ecx = C
    mov    edx, [esp + 40] ; edx = D
    add    eax, ebx        ; eax += ebx
    add    eax, ecx        ; eax += ecx
    add    eax, edx        ; eax += edx
    mov    ebx, [esp + 44] ; ebx = E
    mov    ecx, [esp + 48] ; ecx = F
    mov    edx, [esp + 52] ; edx = G
    add    eax, ebx        ; eax += ebx
    add    eax, ecx        ; eax += ecx
    add    eax, edx        ; eax += edx
    mov    ebx, 0x6        ; ebx = 0x6
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    mov    [esp + 56], eax ; H = eax

; hexadecimal test case block 1 = decimal test case block 1 - H
    mov    eax, [esp +  4] ; eax = decimal test case block 1
    mov    ebx, [esp + 56] ; ebx = H
    sub    eax, ebx        ; eax -= ebx
    mov    [esp + 24], eax ; hexadecimal test case block 1 = eax

; if length of decimal test case == 9
    mov    eax, [esp +  8] ; eax = length of decimal test case
    cmp    eax, 9          ; compare eax with 9
    jne    .condition_11bb ; if not equal, goto .condition_11bb
                           ; else, continue to .condition_11ba

.condition_11ba:

; test case value = ( hexadecimal test case block 0 * 0xa )
;                   + hexadecimal test case block 1
    mov    eax, [esp + 20] ; eax = hexadecimal test case block 0
    mov    ebx, 0xa        ; ebx = 0xa
    mov    ecx, [esp + 24] ; ecx = hexadecimal test case block 1
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    add    eax, ecx        ; eax += ecx
    mov    [esp + 60], eax ; test case value = eax

; since we are .condition_11ba, skip .condition_11bb
    jmp    .endcondition_11b ; goto .endcondition_11b

.condition_11bb:

; test case value = ( hexadecimal test case block 0 * 0x64 )
;                   + hexadecimal test case block 1
    mov    eax, [esp + 20] ; eax = hexadecimal test case block 0
    mov    ebx, 0x64       ; ebx = 0x64
    mov    ecx, [esp + 24] ; ecx = hexadecimal test case block 1
    xor    edx, edx        ; make sure edx = 0
    mul    ebx             ; eax *= ebx
    add    eax, ecx        ; eax += ecx
    mov    [esp + 60], eax ; test case value = eax

.endcondition_11b:

.endcondition_10:

; if remainder ( test case value / k value ) == 0
    mov    eax, [esp + 60]  ; eax = test case value
    mov    ebx, [esp + 12]  ; ebx = k value
    xor    edx, edx         ; make sure edx = 0
    div    ebx              ; eax /= ebx
    cmp    edx, 0           ; compare edx with 0
    jne    .endcondition_20 ; if not equal, goto .endcondition_20

.condition_20:

; ++ x value
    mov    ebx, [esp + 16] ; ebx = addresss x value
    mov    eax, [ebx]      ; eax = x value
    add    eax, 1          ; eax += 1
    mov    [ebx], eax      ; x value = eax

.endcondition_20:

; clean stack frame
    sub    ebp, 8     ; remove argument offset
    mov    esp, ebp   ; restore esp to its initial value
    mov    ebp, [esp] ; restore ebp to its initial value
    add    esp, 4     ; remove ebp from stack

; return to caller
    ret

